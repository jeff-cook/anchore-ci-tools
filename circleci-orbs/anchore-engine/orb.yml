version: 2.1
description: |
  Anchore Engine is a docker container static analysis and policy-based compliance tool that
  automates the inspection, analysis, and evaluation of images to allow high confidence in
  container deployments by ensuring workload content meets the required criteria.
  Orb source code - https://github.com/anchore/ci-tools/blob/master/circleci-orbs/anchore-engine/orb.yml

examples:
  standard_image_scan:
    description: |
      Use this job to scan an image located in a public registry. If policy evaluation fails
      the job will be marked as a failure. A custom policy can be used for evaluation,
      add custom Anchore policy bundle to .circleci/.anchore/policy_bundle.json
    usage:
      version: 2.1
      orbs:
        anchore-engine: anchore/anchore-engine@1.1.0
      workflows:
        scan_image:
          jobs:
            - anchore/image_scan:
                image_name: docker.io/anchore/anchore-engine:latest
                policy_failure: True

  private_image_scan:
    description: |
      Use this job to scan an image located in a private registry. A custom policy can be used for evaluation,
      add custom Anchore policy bundle to .circleci/.anchore/policy_bundle.json
    usage:
      version: 2.1
      orbs:
        anchore-engine: anchore/anchore-engine@1.1.0
      workflows:
        scan_image:
          jobs:
            - anchore/image_scan:
                image_name: docker.io/anchore/anchore-engine:latest
                timeout: '300'
                private_registry: True
                registry_name: docker.io
                registry_user: "${DOCKER_USER}"
                registry_pass: "${DOCKER_PASS}"

  local_image_scan:
    description: |
      Use this command within a container build pipeline, it can be used to scan an image that hasn't
      been pushed to a registry yet. A custom policy can be used for evaluation, add custom Anchore policy
      bundle to .circleci/.anchore/policy_bundle.json
    usage:
      version: 2.1
      orbs:
        anchore-engine: anchore/anchore-engine@1.1.0
      jobs:
        local_image_scan:
          executor: anchore/anchore_engine
          steps:
            - checkout
            - run:
                name: build container
                command: docker build -t ${CIRCLE_PROJECT_REPONAME}:ci .
            - anchore/analyze_local_image:
                image_name: ${CIRCLE_PROJECT_REPONAME}:ci
                timeout: '500'
            - anchore/parse_reports

executors:
  anchore_engine:
    description: Machine runner with anchore engine default environment variables set.
    parameters:
      anchore_cli_pass:
        description: Password used for accessing anchore engine (use env var to populate).
        type: string
        default: "anchore-CWE-259"
    environment:
      ANCHORE_CLI_USER: "admin"
      ANCHORE_CLI_PASS: << parameters.anchore_cli_pass >>
      ANCHORE_CLI_SSL_VERIFY: "n"
    machine:
      image: circleci/classic:201808-01

commands:
  add_private_registry:
    description: |
      Adds credentials for private registries to anchore engine.
      Set registry credentials with $DOCKER_USER & $DOCKER_PASS env vars.
      Must run on executor with anchore-engine running & anchore-cli installed.
    parameters:
      registry_name:
        description: Name of private registry (eg - docker.io).
        type: string
        default: "docker.io"
      registry_user:
        description: Username for private registry (use env var to populate).
        type: string
        default: "${DOCKER_USER}"
      registry_pass:
        description: Password for private registry (use env var to populate).
        type: string
        default: "${DOCKER_PASS}"
    steps:
      - run:
          name: Add private registry credentials to anchore engine.
          command: anchore-cli registry add << parameters.registry_name >> << parameters.registry_user >> << parameters.registry_pass >> --skip-validate

  analyze_local_image:
    description: |
      Pushes a local image to a temporary registry container.
      Image is then scanned with anchore engine. Stores all reports as artifacts.
      Must be run on executor with docker-compose & sudo.
    parameters:
      policy_bundle_file_path:
        description: Specify file path to policy bundle.
        type: string
        default: "/home/circleci/project/.circleci/.anchore/policy_bundle.json"
      policy_failure:
        description: Set to True if pipeline should stop on policy evaluation status 'fail'.
        type: boolean
        default: False
      image_name:
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
        type: string
      timeout:
        description: Timeout used for Anchore Engine image scanning.
        type: string
        default: "300"
    steps:
      - install_tools
      - setup_anchore_engine
      - run:
          name: Start registry container & push local image.
          command: |
            cat \<< EOF \>> docker-compose.yaml

              anchore-registry:
                image: "registry:latest"
                ports:
                - "5000:5000"
            EOF
            docker-compose up -d
            echo "127.0.0.1 anchore-registry" | sudo tee -a /etc/hosts > /dev/null
            echo "Waiting for registry to start..."
            sleep 15
            docker tag << parameters.image_name >> anchore-registry:5000/<< parameters.image_name >>
            docker push anchore-registry:5000/<< parameters.image_name >>
      - analyze_image:
          image_name: anchore-registry:5000/<< parameters.image_name >>
          timeout: << parameters.timeout >>
      - policy_evaluation:
          image_name: anchore-registry:5000/<< parameters.image_name >>
          policy_failure: << parameters.policy_failure >>
          policy_bundle_file_path: << parameters.policy_bundle_file_path >>
      - parse_reports
      - store_artifacts:
          path: anchore-reports

  analyze_image:
    description: |
      Add image to anchore engine and start analyzing.
      image_name is required, timeout is optional.
      Must run on executor with anchore_ci_tools.py & anchorecli installed.
    parameters:
      image_name:
        description: Image repository & tag (eg - "anchore/anchore-engine:latest").
        type: string
      timeout:
        description: Timeout used for Anchore Engine image scanning.
        type: string
        default: "300"
    steps:
      - run:
          name: Analyze image with anchore engine.
          command: anchore_ci_tools --analyze --report --image << parameters.image_name >> --timeout << parameters.timeout >>

  install_tools:
    description: |
      Install anchore_ci_tools.py & anchorecli.
    steps:
      - run:
          name: Install anchore tools
          command: |
            pyenv global 3.5.2
            pip install --upgrade pip
            pip install --upgrade anchorecli
            curl -o /tmp/anchore_ci_tools.py https://raw.githubusercontent.com/anchore/ci-tools/v0.3.0/scripts/anchore_ci_tools.py
            sed -i 's|/usr/bin/python3|/opt/circleci/.pyenv/shims/python3|' /tmp/anchore_ci_tools.py
            chmod +x /tmp/anchore_ci_tools.py
            ln -s /tmp/anchore_ci_tools.py /home/circleci/bin/anchore_ci_tools

  parse_reports:
    description: Prints analysis report of package vulnerabilites using JQ.
    steps:
      - run:
          name: View parsed vulnerability analysis report.
          command: |
            printf "\n%s\n" "The following OS packages are installed:"
            jq '[.content | sort_by(.package) | .[] | {package: .package, version: .version}]' anchore-reports/image-content-os-report.json || true
            printf "\n%s\n" "The following vulnerabilites were found:"
            jq '[.vulnerabilities | group_by(.package) | .[] | {package: .[0].package, vuln: [.[].vuln]}]' anchore-reports/image-vuln-report.json || true

  policy_evaluation:
    description: |
      Perform policy evaluation using Anchore Engine image analysis. A customized policy bundle can be utilized for evaluation.
      Custom policy bundles should be added to your repo at .circleci/.anchore/policy_bundle.json. If using multiple policy
      bundles, or if using executor other than anchore/anchore_engine a custom policy bundle path can be set as a parameter.
    parameters:
      image_name:
        description: Name of the image to be evaluated
        type: string
      policy_failure:
        description: Set to True if pipeline should stop on policy evaluation status 'fail'.
        type: boolean
        default: False
      policy_bundle_file_path:
        description: Specify file path to policy bundle.
        type: string
        default: "/home/circleci/project/.circleci/.anchore/policy_bundle.json"
    steps:
      - run:
          name: Evaluate image against desired policy bundle.
          command: |
            (anchore-cli --json policy add << parameters.policy_bundle_file_path >> | jq '.policyId' | xargs anchore-cli policy activate) &> /dev/null || printf "\n%s\n" "No custom policy bundle found at << parameters.policy_bundle_file_path >> - using default policy bundle"
            if << parameters.policy_failure >>; then
              anchore-cli evaluate check << parameters.image_name >> --detail
            else
              (set +o pipefail; anchore-cli evaluate check << parameters.image_name >> --detail | tee /dev/null)
            fi

  setup_anchore_engine:
    description: |
      Setup anchore-engine using docker compose and default configuration.
      Must be run on executor with anchore_ci_tools.py, anchorecli & docker-compose installed.
    parameters:
      anchore_cli_pass:
        description: Password used for accessing anchore engine (use env var to populate).
        type: string
        default: "${ANCHORE_CLI_PASS}"
    steps:
      - run:
          name: Create anchore engine configuration files.
          command: |
            mkdir config db
            cat \<< EOF \>> config/config.yaml
            # Anchore Service Configuration File
            log_level: 'INFO'
            cleanup_images: True
            host_id: 'dockerhostid-anchore-engine'
            internal_ssl_verify: False
            auto_restart_services: False
            default_admin_password: '<< parameters.anchore_cli_pass >>'
            default_admin_email: 'admin@myemail.com'
            credentials:
              database:
                db_connect: 'postgresql+pg8000://postgres:mysecretpassword@anchore-db:5432/postgres'
                db_connect_args:
                  timeout: 120
                  ssl: False
                db_pool_size: 30
                db_pool_max_overflow: 100
            services:
              apiext:
                enabled: True
                require_auth: True
                endpoint_hostname: 'anchore-engine'
                listen: '0.0.0.0'
                port: 8228
                authorization_handler: native
              catalog:
                enabled: True
                require_auth: True
                endpoint_hostname: 'anchore-engine'
                listen: '0.0.0.0'
                port: 8082
                archive:
                  compression:
                    enabled: False
                    min_size_kbytes: 100
                  storage_driver:
                    name: db
                    config: {}
                cycle_timer_seconds: '1'
                cycle_timers:
                  image_watcher: 3600
                  policy_eval: 3600
                  vulnerability_scan: 14400
                  analyzer_queue: 1
                  notifications: 30
                  service_watcher: 15
                  policy_bundle_sync: 300
                  repo_watcher: 60
              simplequeue:
                enabled: True
                require_auth: True
                endpoint_hostname: 'anchore-engine'
                listen: '0.0.0.0'
                port: 8083
              analyzer:
                enabled: True
                require_auth: True
                cycle_timer_seconds: 1
                max_threads: 1
                analyzer_driver: 'nodocker'
                endpoint_hostname: 'anchore-engine'
                listen: '0.0.0.0'
                port: 8084
              policy_engine:
                enabled: True
                require_auth: True
                endpoint_hostname: 'anchore-engine'
                listen: '0.0.0.0'
                port: 8087
                cycle_timer_seconds: 1
                cycle_timers:
                  feed_sync: 21600
                  feed_sync_checker: 3600
            EOF

            cat \<< EOF \>> docker-compose.yaml
            # Anchore engine docker-compose configuration.
            version: '2'
            services:
              anchore-engine:
                image: docker.io/anchore/anchore-engine:v0.3.0
                depends_on:
                 - anchore-db
                ports:
                 - "8228:8228"
                 - "8338:8338"
                volumes:
                 - ./config:/config/:z
                logging:
                 driver: "json-file"
                 options:
                  max-size: 100m
              anchore-db:
                image: "anchore/engine-db-preload:v0.3.0"
                volumes:
                 - ./db:/var/lib/postgresql/data/pgdata/:z
                environment:
                  - POSTGRES_PASSWORD=mysecretpassword
                  - PGDATA=/var/lib/postgresql/data/pgdata/
                logging:
                 driver: "json-file"
                 options:
                  max-size: 100m
            EOF
      - run:
          name: Start anchore engine.
          command: |
            pip install --upgrade docker-compose
            docker-compose up -d
            printf "\n%s\n" "Waiting for anchore engine to start..."
            anchore_ci_tools --wait

jobs:
  image_scan:
    executor: anchore_engine
    description: |
      Performs a static security analysis of docker container with anchore engine.
      Anchore engine pulls image from public/private docker registries.
      Requires registry credentials to access private images, use ENV vars
      $DOCKER_USER & $DOCKER_PASS
    parameters:
      policy_bundle_file_path:
        description: Specify file path to policy bundle.
        type: string
        default: "/home/circleci/project/.circleci/.anchore/policy_bundle.json"
      policy_failure:
        description: Set to True if pipeline should stop on policy evaluation status 'fail'.
        type: boolean
        default: False
      image_name:
        description: Image repository & tag (eg - "docker.io/anchore/anchore-engine:latest").
        type: string
      private_registry:
        description: Set to True if image is only accessible from a private registry.
        type: boolean
        default: False
      registry_name:
        description: Name of private registry (eg - docker.io)
        type: string
        default: "docker.io"
      registry_user:
        description: Username for private registry (use env var to populate).
        type: string
        default: "${DOCKER_USER}"
      registry_pass:
        description: Password for private registry (use env var to populate).
        type: string
        default: "${DOCKER_PASS}"
      timeout:
        description: Timeout used for Anchore Engine image scanning.
        type: string
        default: "300"
    steps:
      - checkout
      - install_tools
      - setup_anchore_engine
      - when:
          condition: << parameters.private_registry >>
          steps:
            - add_private_registry:
                registry_name: << parameters.registry_name >>
                registry_user: << parameters.registry_user >>
                registry_pass: << parameters.registry_pass >>
      - analyze_image:
          image_name: << parameters.image_name >>
          timeout: << parameters.timeout >>
      - policy_evaluation:
          image_name: << parameters.image_name >>
          policy_failure: << parameters.policy_failure >>
          policy_bundle_file_path: << parameters.policy_bundle_file_path >>
      - parse_reports
      - store_artifacts:
          path: anchore-reports
